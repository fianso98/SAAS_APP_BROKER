/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication6;

import com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author sofia
 */
public class filter2 extends javax.swing.JFrame {

    /**
     * Creates new form filter2
     */
    String UserC,Password;
    public filter2() {
        initComponents();
    }
    public filter2(String UserC,String Password) {
        initComponents();
        this.UserC=UserC;
        this.Password=Password;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        filter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        back = new javax.swing.JButton();
        domain = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCheckBox1.setText("réputation");

        jCheckBox2.setText("confiance");

        jCheckBox3.setText("expérience");

        jCheckBox4.setText("disponibilité");

        jCheckBox5.setText("coût");

        jCheckBox6.setText("temps de réponse");

        jCheckBox7.setText("temps moyen de représentation");

        jCheckBox8.setText("risques");

        filter.setText("filter");
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox3)
                            .addComponent(jCheckBox4))
                        .addGap(18, 89, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filter)
                            .addComponent(jCheckBox8)
                            .addComponent(jCheckBox7)
                            .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(84, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox8))
                .addGap(32, 32, 32)
                .addComponent(filter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        domain.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "transport", "restaurant", "web" }));

        jTextField1.setText("Enter the name of Fournisseur");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("valider");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back)
                        .addGap(83, 83, 83)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jButton1))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(domain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(domain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
        try {
            getFiles();
            String resultFileName=null;
            double max1=0;
            double moy=0;
            double s=0;
            //positive
            File dir = new File(path);
            int all=0;
            //réputation
            for (File fXmlFile : dir.listFiles()) {
            if(jCheckBox1.isSelected()){
                int max=Integer.parseInt(xmlReder(fXmlFile,path,"réputation"));
                all=all+max;
                //System.out.println("the best réputation is "+max+" belongs to :"+filename);
                s++;
            }
            //
            if(jCheckBox2.isSelected()){int max=Integer.parseInt(xmlReder(fXmlFile,path,"confiance"));
                all=all+max;
                //System.out.println("the best réputation is "+max+" belongs to :"+filename);
                s++;}
            //
            if(jCheckBox3.isSelected()){
                int max=Integer.parseInt(xmlReder(fXmlFile,path,"expérience"));
                all=all+max;
                //System.out.println("the best réputation is "+max+" belongs to :"+filename);
                s++;}
            //
            if(jCheckBox4.isSelected()){
                int max=Integer.parseInt(xmlReder(fXmlFile,path,"disponibilité"));
                all=all+max;
                //System.out.println("the best réputation is "+max+" belongs to :"+filename);
                s++;}
            //negative
            //
            if(jCheckBox5.isSelected()){
                int max=10-Integer.parseInt(xmlReder(fXmlFile,path,"coût"));
                all=all+max;
                //System.out.println("the best réputation is "+max+" belongs to :"+filename);
                s++;}
            //
            if(jCheckBox6.isSelected()){
                int max=10-Integer.parseInt(xmlReder(fXmlFile,path,"temps_de_réponse"));
                all=all+max;
                //System.out.println("the best réputation is "+max+" belongs to :"+filename);
                s++;}
            //
            if(jCheckBox7.isSelected()){int max=10-Integer.parseInt(xmlReder(fXmlFile,path,"risques"));
                all=all+max;
                //System.out.println("the best réputation is "+max+" belongs to :"+filename);
                s++;}
            //
            if(jCheckBox8.isSelected()){
                int max=10-Integer.parseInt(xmlReder(fXmlFile,path,"temps_moyen_de_représentation"));
                all=all+max;
                //System.out.println("the best réputation is "+max+" belongs to :"+filename);
                s++;}
            
            
            
                String filename = fXmlFile.getName();
                moy=all/s;
                if(max1<moy){
                    max1=moy;
                    resultFileName=filename;
                }
                
            }
            
            String result="the result is : "+max1+" belongs to :"+resultFileName;
            TextView(result);
            
        } catch (SQLException | IOException ex) {
           JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_filterActionPerformed
    public void TextView(String line) throws FileNotFoundException, IOException{
   
                    jTextArea1.setText(null);
                    jTextArea1.append(line);
                    jTextArea1.append("\n");
          
   } 
    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        try {
            conecter().close();
            dispose();
            new ControlPanelClient().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(filter2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_backActionPerformed
public String getDate(String User,String Domain) throws SQLException{
        
        String date=" ";
        try {
            ResultSet rs ;
            
            String q="select DAY(fournisseur_date),MONTH(fournisseur_date),YEAR(fournisseur_date) from Fournisseur WHERE fournisseur_nom='"+User+"' and domain_nom='"+Domain +"'";
            Statement stmt = conecter().createStatement();
            rs = stmt.executeQuery(q);
            rs.next();
            int month=Integer.parseInt(rs.getString("MONTH(fournisseur_date)"));
            if(month<10){
             date=rs.getString("YEAR(fournisseur_date)")+"-0"+month+"-"+rs.getString("DAY(fournisseur_date)");
            rs.close();
            stmt.close();
            }else{
                date=rs.getString("YEAR(fournisseur_date)")+"-"+month+"-"+rs.getString("DAY(fournisseur_date)");
            rs.close();
            stmt.close();
            }
            
                    } catch (SQLException ex) {
            Logger.getLogger(ControlPanelClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("javaapplication6.FilterChoise.getDate()"+date);
        return date;
    }
    public void asember(String Domain,String UserF,String UserC) throws SQLException{
        
        try {
            /*  button te3 valider
            segem sql 3la 7sab database te3k
            ida l9ah chrah 9bal 90 days donc ywidlo points f database te3 client li dayerha ana integer asemha vintime
            sema ida chtah <90 days wkanet la valeur te3 vintime+1==5 ymdlo service batel + yrod vintime = 0
            ida kanet lavaleur vintime+1<5  ydir update l vintime f database ydirha vintime+1 */
            
            
            // jibli time li f fichier li khayro
            
            
            
            Statement st = conecter().createStatement();
            Long i = Diff(UserF,Domain);
            System.out.println("javaapplication6.FilterChoise.asember()"+i);
            //************
            String query="insert into  validation (client_nom,client_password,fournisseur_nom,fournisseur_domain) values(?,?,?,?)  ";
            PreparedStatement pst = conecter().prepareStatement(query);
            
            
            pst.setString(1,UserC );
            
            pst.setString(2, Password);
            pst.setString(3, UserF);
            pst.setString(4, Domain);
            
            
            
            pst.executeUpdate();
            pst.close();
            //*******
            String query2="UPDATE client SET client_valider=? , client_fournisseur_nom=? where (client_nom=?) ";
            PreparedStatement psta = conecter().prepareStatement(query2);
            
            
            psta.setBoolean(1,true );
            psta.setString(2,UserF );
            psta.setString(3,UserC );
            
            psta.executeUpdate();
            psta.close();
            //90= 3mois ida chrah w kan 3ando 9al ma 3 mois meli 7atouh lel bi3
            if(i<90){
                String qu = "SELECT client_points FROM client WHERE client_nom='"+UserC+"'";//  where username = asemclient li logina
                ResultSet rs = st.executeQuery(qu);
                rs.next();
                String j =rs.getString("client_points");
                System.out.println("k="+j+" userC= "+UserC+" f "+UserF+" d "+Domain);
                rs.close();
                st.close();
                conecter().close();
                
                int k= Integer.parseInt(j);
                
                
               
                
                
                
                if(k+1==5){
                    
                   
                    PreparedStatement Stmt =(PreparedStatement)conecter().prepareStatement("UPDATE client SET client_points=? where (client_nom=?)");
                    JOptionPane.showMessageDialog(null,"congrats you have a service for free");
                    Stmt.setInt(1,0 );
                
                Stmt.setString(2, UserC);
                Stmt.executeUpdate();
                
                Stmt.close();
                conecter().close();
               
                }else{
                   
                     PreparedStatement Stmt =(PreparedStatement)conecter().prepareStatement("UPDATE client SET client_points=? where (client_nom=?)");
                       Stmt.setInt(1,k+1 );
                                Stmt.setString(2, UserC);
                                Stmt.executeUpdate();
                                
                                Stmt.close();
                                conecter().close();
                               
                                JOptionPane.showMessageDialog(null,"validated");
                      }
                
                
            }
        } catch(MySQLIntegrityConstraintViolationException ex){
            System.out.println( "QUERY IS ALREADY THERE: ");
        }catch (SQLException ex) {
            int errCode = ex.getErrorCode();
     if(errCode == 1062){ //MySQLIntegrityConstraintViolationException 
     JOptionPane.showMessageDialog(null, "Duplicate validation \n wait for a broker to \n validate your offer");}
      
           
        }
                           
       

       
    
    }

public String currenttime(){
       java.util.Date dt = new java.util.Date();

java.text.SimpleDateFormat sdf = 
     new java.text.SimpleDateFormat("yyyy-MM-dd");

    String currentTime = sdf.format(dt);
    System.out.println("javaapplication6.FilterChoise.currenttime()"+currentTime);
       return currentTime;
       }
public Long Diff(String UserF,String Domain) throws SQLException{
long dif;
 String crnttime=currenttime();
DateTimeFormatter smpl= DateTimeFormatter.ofPattern("yyyy-MM-dd");
//SimpleDateFormat smpl = new SimpleDateFormat("dd MM yyyy");

LocalDate curnt = LocalDate.parse(crnttime,smpl);
LocalDate old = LocalDate.parse(getDate(UserF, Domain),smpl);
dif=ChronoUnit.DAYS.between(curnt,old);
return dif;
}
public void confiance(String domain,String userF) throws IOException, FileNotFoundException, ClassNotFoundException, SAXException, XPathExpressionException, TransformerException, ParserConfigurationException{
        try {
            Connection conn = null;
            
            
            Statement st = conecter().createStatement();
            
            //jib nombre de vente
            String query = "SELECT fournisseur_nb_vente FROM fournisseur WHERE fournisseur_nom='"+userF+"' and domain_nom='"+domain+"'";
             ResultSet rs = st.executeQuery(query);
             rs.next();
            int nbV =rs.getInt("fournisseur_nb_vente");
            //jib la date li 7at fiha service tsema old time
            
            //conf= jib la valeur te3 confiance ;
            String path2="C:\\Users\\sofia\\Documents\\NetBeansProjects\\JavaApplication6\\tmpWSDL\\";
            getFiles(path2,domain,userF);
            File file=new File(path2+"/"+userF+".xml");
            
            int conf=Integer.parseInt(xmlReaderGetConfiance(file));  // confiance nta hna ki tjib la valeur t3ha affectiha fih
            
            if(nbV<5 && Diff(userF, domain)>20 && conf>0){conf=conf-1;}else if(nbV == 5 && conf<10){conf+=1;}else
            if(nbV>6 && Diff(userF, domain)<20 && Diff(userF, domain)>10 && conf>0){conf=conf+1;}else if(nbV == 6 && conf<10){conf=conf+1;}
            if(nbV>20){conf=(conf+1)*3/2;
            if(conf>10){
                conf=10;
            }
            }
             System.out.println("javaapplication6.FilterChoise.confiance() ="+conf+" getconf= "+xmlReaderGetConfiance(file));
            // dok confiance rahi wajda ab3at din babaha l fichier wsdl 
            AddElemnt(path2+userF+".xml", xmlReaderGetReputation(file), Integer.toString(conf), xmlReaderGetExperience(file), xmlReaderGetDisponibilite(file), xmlReaderGetCout(file), xmlReaderGetTDRepence(file), xmlReaderGetRisques(file),xmlReaderGetTMDRepresentation(file));
            
            insertIntoDb(path2+userF+".xml", userF, domain);
            System.out.println("javaapplication6.FilterChoise.confiance() ="+conf+" getconf= "+xmlReaderGetConfiance(file));
        } catch (SQLException ex) {
            Logger.getLogger(FilterChoise.class.getName()).log(Level.SEVERE, null, ex);
        }
            
       
       
    
    }
    public String xmlReaderGetConfiance(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("confiance").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
     public String xmlReaderGetReputation(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("réputation").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetExperience(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("expérience").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetDisponibilite(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("disponibilité").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetCout(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("coût").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetTDRepence(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("temps_de_réponse").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetRisques(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("risques").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetTMDRepresentation(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("temps_moyen_de_représentation").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    } 
    public void xmlReaderSetConfiance(String path,String line) throws SAXException, IOException, XPathExpressionException, TransformerException{
        
        try {
            DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();
            DocumentBuilder b = f.newDocumentBuilder();
            Document doc = b.parse(new File(path));
            
//Now, there are a few ways to do this, but simply, you can use the xpath API to find the nodes you want and update their content

XPath xPath = XPathFactory.newInstance().newXPath();
Node startDateNode = (Node) xPath.compile("/definitions/types/propriétés").evaluate(doc, XPathConstants.NODE);
startDateNode.setTextContent("29/07/2015");
Transformer tf = TransformerFactory.newInstance().newTransformer();
tf.setOutputProperty(OutputKeys.INDENT, "yes");
tf.setOutputProperty(OutputKeys.METHOD, "xml");
tf.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

DOMSource domSource = new DOMSource(doc);
StreamResult sr = new StreamResult(new File("Data.xml"));
tf.transform(domSource, sr);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(FilterChoise.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(FilterChoise.class.getName()).log(Level.SEVERE, null, ex);
        }
       
   
    }
        public void insertIntoDb(String filename,String User,String Domain) throws FileNotFoundException, SQLException, ClassNotFoundException, IOException{
     File file= new File(filename);


//PreparedStatement statement = conecter().prepareStatement("INSERT INTO Fournisser (file) VALUES (?) where UserName='"+UserName+"'and PassWord='"+PassWord+"'");
//statement.setBlob(1, inputStream);
     
        
        //DataInputStream dataIs = new DataInputStream(new FileInputStream(f1));
        PreparedStatement pst = conecter().prepareStatement("UPDATE fournisseur SET fichier = ? where (fournisseur_nom= '"+User+"') and (domain_nom= '"+Domain+"')");
        
                              FileInputStream input=new FileInputStream(file);
                               
                               pst.setBinaryStream(1,input,(int) file.length());
                               
                             
                                pst.executeUpdate();
                                pst.close();
    //pst.setInt(1,67);
      
       System.out.println("Reading file " + file.getAbsolutePath());
            System.out.println("Store file in the database.");
        
        System.out.println(" database.");
        
    
    
    }
           public void getFiles(String path,String Domain,String UserF) throws FileNotFoundException, SQLException, IOException, ClassNotFoundException{
        // DELETE DERECTORY
            Files.walk(Paths.get(path))
                .filter(Files::isRegularFile)
                .map(Path::toFile)
                .forEach(File::delete);
       
            
        File file=new File(path+UserF+".xml");
        FileOutputStream fos=new FileOutputStream(file);
        byte b[];
        Blob blob;

        PreparedStatement ps=conecter().prepareStatement("SELECT fichier FROM fournisseur where fournisseur_nom='"+UserF+"' and domain_nom='"+Domain+"'"); 
        ResultSet rs=ps.executeQuery();

        if(rs.next()){
            blob=rs.getBlob("fichier");
            b=blob.getBytes(1,(int)blob.length());
            fos.write(b);
        }

        ps.close();
        fos.close();
        conecter().close();
    }
       public static void AddElemnt(String filename,String Réputation,String conf,String Expérience,String Disponibilité,String Coût,String TempsDeRéponse,String Risques,String Tmr) throws ParserConfigurationException, FileNotFoundException, SAXException, IOException, TransformerConfigurationException, TransformerException{
    
    //transformer lage en String
    
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        //dbf.setValidating(false);
        DocumentBuilder db = dbf.newDocumentBuilder();
         File file=new File(filename);
         if(!file.exists()){
             file.createNewFile();
         }
        //Document doc = db.parse(file);
        Document doc = db.newDocument();
        /**
        Element root = doc.createElement("company");
            doc.appendChild(root);
 
            // employee element
            Element employee = doc.createElement("employee");
 
            root.appendChild(employee);
 
            // set an attribute to staff element
            Attr attr = doc.createAttribute("id");
            attr.setValue("10");
            employee.setAttributeNode(attr);
 
            //you can also use staff.setAttribute("id", "1") for this
 
            // firstname element
            Element firstName = doc.createElement("firstname");
            firstName.appendChild(doc.createTextNode("James"));
            employee.appendChild(firstName);
 
            // lastname element
            Element lastname = doc.createElement("lastname");
            lastname.appendChild(doc.createTextNode("Harley"));
            employee.appendChild(lastname);
 
            // email element
            Element email = doc.createElement("email");
            email.appendChild(doc.createTextNode("james@example.org"));
            employee.appendChild(email);
 
            // department elements
            Element department = doc.createElement("department");
            department.appendChild(doc.createTextNode("Human Resources"));
            employee.appendChild(department);
        **/
        
        Element definitions= doc.createElement("definitions");
        doc.appendChild(definitions);
        
        
        Element types= doc.createElement("types");
        definitions.appendChild(types);
        
        Element propriétés= doc.createElement("propriétés");
        types.appendChild(propriétés);
       //addfirstname
         
        Element réputation = doc.createElement("réputation");
        réputation.appendChild(doc.createTextNode(Réputation));
        propriétés.appendChild(réputation);
        //add secondname
        Element confiance = doc.createElement("confiance");
        confiance.appendChild(doc.createTextNode(conf));
        propriétés.appendChild(confiance);
        //add sexe
        Element expérience = doc.createElement("expérience");
        expérience.appendChild(doc.createTextNode(Expérience));
        propriétés.appendChild(expérience);
        //add age
        Element disponibilité = doc.createElement("disponibilité");
        disponibilité.appendChild(doc.createTextNode(Disponibilité));
        propriétés.appendChild(disponibilité);
        //add adress
        Element coût = doc.createElement("coût");
        coût.appendChild(doc.createTextNode(Coût));
        propriétés.appendChild(coût);
        //add email
        Element tempsDeRéponse = doc.createElement("temps_de_réponse");
        tempsDeRéponse.appendChild(doc.createTextNode(TempsDeRéponse));
        propriétés.appendChild(tempsDeRéponse);
        //add numero
        Element risques = doc.createElement("risques");
        risques.appendChild(doc.createTextNode(Risques));
        propriétés.appendChild(risques);

        Element tmr = doc.createElement("temps_moyen_de_représentation");
        tmr.appendChild(doc.createTextNode(Tmr));
        propriétés.appendChild(tmr);
           
        Element message = doc.createElement("message");
        message.appendChild(doc.createTextNode("definition of the data being communicated...."));
        definitions.appendChild(message);
        Element portType = doc.createElement("portType");
        portType.appendChild(doc.createTextNode("set of operations...... "));
        definitions.appendChild(portType);
        Element binding = doc.createElement("binding");
        binding.appendChild(doc.createTextNode("protocol and data format specification...."));
        definitions.appendChild(binding);
         TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource domSource = new DOMSource(doc);
            StreamResult streamResult = new StreamResult(file);
 
            // If you use
            // StreamResult result = new StreamResult(System.out);
            // the output will be pushed to the standard output ...
            // You can use that for debugging 
 
            transformer.transform(domSource, streamResult);
 
            System.out.println("Done creating XML File");
       
          
    
    }
       
    
    public void getFiles(String Domain) throws FileNotFoundException, SQLException, IOException{
        // DELETE DERECTORY
            Files.walk(Paths.get(path))
                .filter(Files::isRegularFile)
                .map(Path::toFile)
                .forEach(File::delete);
        PreparedStatement ps1=conecter().prepareStatement("SELECT fournisseur_nom FROM fournisseur where domain_nom='"+Domain+"'"); 
        ResultSet rs1=ps1.executeQuery();
        while(rs1.next()){
            
        File file=new File(path+rs1.getString(1)+".xml");
        FileOutputStream fos=new FileOutputStream(file);
        byte b[];
        Blob blob;

        PreparedStatement ps=conecter().prepareStatement("SELECT fichier FROM fournisseur where fournisseur_nom='"+rs1.getString(1)+"'"); 
        ResultSet rs=ps.executeQuery();

        if(rs.next()){
            blob=rs.getBlob("fichier");
            b=blob.getBytes(1,(int)blob.length());
            fos.write(b);
        }

        ps.close();
        fos.close();
        conecter().close();}
    }
    /**
     * @param args the command line arguments
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String Domain=domain.getSelectedItem().toString();
            String UserF=jTextField1.getText();
            
            asember(Domain,UserF,UserC);
            
        } catch (SQLException ex) {
            Logger.getLogger(FilterChoise.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    
    public Connection conecter() throws SQLException{
            String url="jdbc:mysql://localhost:3306/saass" ;
         String user="root";
         String pass="";
          Connection con= DriverManager.getConnection(url,user,pass);
         return con;
        }
    
     public String xmlReder(File fXmlFile,String path,String element){
         
String line = null;

    
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName(element).item(0).getTextContent();
                        

		}
	}
        
    } catch (Exception e) {
	e.printStackTrace();
    }
    

        
       
       return line;
   }
    public void getFiles() throws FileNotFoundException, SQLException, IOException{
          Files.walk(Paths.get(path))
                .filter(Files::isRegularFile)
                .map(Path::toFile)
                .forEach(File::delete);
        PreparedStatement ps1=conecter().prepareStatement("SELECT fournisseur_nom FROM Fournisseur WHERE   (fichier  IS NOT NULL) "); 
        ResultSet rs1=ps1.executeQuery();
        while(rs1.next()){
            
        File file=new File(path+rs1.getString(1)+".wsdl");
        FileOutputStream fos=new FileOutputStream(file);
        byte b[];
        Blob blob;

        PreparedStatement ps=conecter().prepareStatement("SELECT fichier FROM Fournisseur where (fournisseur_nom='"+rs1.getString(1)+"')"); 
        ResultSet rs=ps.executeQuery();

         boolean T=false;
        while(rs.next()){
            if(rs.getBlob("fichier")!=null){
            blob=rs.getBlob("fichier");
            b=blob.getBytes(1,(int)blob.length());
            fos.write(b);
           
            }
        }

        ps.close();
        fos.close();
        conecter().close();}
    }
    
    String path="C:\\Users\\sofia\\Documents\\NetBeansProjects\\JavaApplication6\\filesWsdl\\";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JComboBox<String> domain;
    private javax.swing.JButton filter;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
