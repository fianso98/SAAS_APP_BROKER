/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication6;

import com.sun.media.sound.InvalidFormatException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javaapplication6.filter2.AddElemnt;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author sofia
 */
public class AdminValider extends javax.swing.JPanel {

    /**
     * Creates new form AdminValider
     */
    DefaultTableModel mdl= new DefaultTableModel(); 
    
    public AdminValider() {
          mdl.addColumn("clien nom");
         mdl.addColumn("fournisseur nom");
         mdl.addColumn("fournisseur domain");
        initComponents();
    }
    public void List(){
     try{
       
      
         Statement st = conecter().createStatement();
         
          String q="SELECT client_nom,fournisseur_nom,fournisseur_domain FROM validation ";
          
          
         ResultSet ss = st.executeQuery(q);
         
        
         mdl.setRowCount(0);
           while(ss.next()){
          mdl.addRow(new Object[]{ss.getString(1),ss.getString(2),ss.getString(3)});
           
           }
           jTable1.setModel(mdl);
          mdl.fireTableDataChanged();
          
          
         
          
        }catch(SQLException e){JOptionPane.showMessageDialog(null,e.getMessage());}
       
}
    public Connection conecter() throws SQLException{
            String url="jdbc:mysql://localhost:3306/saass" ;
         String user="root";
         String pass="";
          Connection con= DriverManager.getConnection(url,user,pass);
         return con;
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Consult");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Valider");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(66, 66, 66))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // Sla et Rendre Valider false
            
            System.out.println(jTable1.getValueAt(jTable1.getSelectedRow(),0) );
            
         
          
         String Client_nom=(String) mdl.getValueAt(jTable1.getSelectedRow(),0);
         String Fournisseur_nom=(String)mdl.getValueAt(jTable1.getSelectedRow(),1);
         String Fournisseur_domain=(String)mdl.getValueAt(jTable1.getSelectedRow(),2);
         //*** delete validation 
         PreparedStatement st = conecter().prepareStatement("DELETE FROM validation WHERE (client_nom='"+Client_nom+"') and (fournisseur_nom='"+Fournisseur_nom+"') and (fournisseur_domain='"+Fournisseur_domain+"')");
        st.executeUpdate(); 
        
            System.out.println("Client_nom= "+Client_nom+" Fournisseur_nom= "+Fournisseur_nom+" Fournisseur_domain= "+Fournisseur_domain);
            //jTable1.getSelectedColumn();
            String query="UPDATE client SET client_valider=? where (client_nom=?) ";
            PreparedStatement pst = conecter().prepareStatement(query);
            
            
            pst.setBoolean(1,false );
            String client=(String) mdl.getValueAt(jTable1.getSelectedRow(),0);
            pst.setString(2,(String) mdl.getValueAt(jTable1.getSelectedRow(),0) );
            
            pst.executeUpdate();
            pst.close();
            //nb vente ++
             //fournisseur nbvente in data base
               Statement stt = conecter().createStatement();
                               String que = "SELECT fournisseur_nb_vente FROM fournisseur WHERE fournisseur_nom='"+Fournisseur_nom+"' and domain_nom='"+Fournisseur_domain+"'";//  where username = asemclient li logina
                ResultSet rst = stt.executeQuery(que);
                rst.next();
                int fournisseur_vent =rst.getInt("fournisseur_nb_vente");
                 PreparedStatement Stmt2 =(PreparedStatement)conecter().prepareStatement("UPDATE fournisseur SET fournisseur_nb_vente="+(fournisseur_vent+1)+" where fournisseur_nom='"+Fournisseur_nom+"' and domain_nom='"+Fournisseur_domain+"'");
               Stmt2.executeUpdate();
               Stmt2.close();
            //augmenter la confiance d'un fournisseur
            confiance(Fournisseur_domain, Fournisseur_nom);
            //sla contrat
            contrat(Client_nom,Fournisseur_nom,Fournisseur_domain,currenttime());
            
            
            JOptionPane.showMessageDialog(null,client+" a été Valider");
        } catch (SQLException ex) {
            Logger.getLogger(AdminValider.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AdminValider.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AdminValider.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(AdminValider.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XPathExpressionException ex) {
            Logger.getLogger(AdminValider.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(AdminValider.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(AdminValider.class.getName()).log(Level.SEVERE, null, ex);
        }
        List();
    }//GEN-LAST:event_jButton2ActionPerformed
public static void contrat(String client_nom,String fournisseur_nom,String fournisseur_domain,String date) throws FileNotFoundException, IOException, InvalidFormatException{
// les informations bayna tjibhom men database men 3and client li chra w fournisseur li ba3lo ki yekliki boutton valider
// interface te3 client zid fiha ydakhel address et email et num 
// client info
        String clientname=client_nom;  //jib nom te3 client
        String cemail="exemple@hotmail.com";  // jib email te3 client
        String cadr="blida";         // jib address te3 client
        String num="055XXXX";      // jib num te3 compte te3 client
        
        // interface te3 fournisseur zidlo ydkhel email et address 
        //fournisseur info
        String fournisseurname=fournisseur_nom; // nom du fournisseur
        String sdomain=fournisseur_domain;  // domain
        String fadr="alger";  // address te3 fournisseur 
        String femail="exemple@hotmail.com"; // email te3 fournisseur
        // la date
        String currentdate=date; // hadi jibha b la fonction te3 currenttime();
        // hada fichier SLA jibo men 3and table broker database
        //tsema broker 3ndo colonne zyada fichier  SLA
         FileInputStream file = new FileInputStream("C:\\Users\\sofia\\Documents\\NetBeansProjects\\JavaApplication6\\SLA.docx");
       XWPFDocument doc = new XWPFDocument(file);

for (XWPFParagraph p : doc.getParagraphs()) {
    List<XWPFRun> runs = p.getRuns();
     
    if (runs != null) {
        for (XWPFRun r : runs) {
            String text = r.getText(0);
            
            //System.out.println(text);
            switch(text){
           
                case "clientname":    text = text.replaceAll("clientname",clientname);
                                      r.setText(text, 0); break;
                 case "num":    text = text.replace("num",num);
                                      r.setText(text, 0); break;
              
                 case "fournisseurname":    text = text.replaceAll("fournisseurname",fournisseurname);
                                      r.setText(text, 0); break;
                 case "cadr":    text = text.replace("cadr", cadr);
                                      r.setText(text, 0); break;
                 case "cemail":    text = text.replace("cemail", cemail);
                                      r.setText(text, 0); break;
                 case "sdomain":    text = text.replace("sdomain", sdomain);
                                      r.setText(text, 0); break;
                  case "fadr":    text = text.replace("fadr", fadr);
                                      r.setText(text, 0); break;
                  case "femail":    text = text.replace("femail",femail);
                                      r.setText(text, 0); break;     
                 case "currentdate":    text = text.replaceAll("currentdate", currentdate);
                                      r.setText(text, 0); break;                      
          
        }
    }
}

doc.write(new FileOutputStream("contrat.docx"));
    }}
public void confiance(String domain,String userF) throws IOException, FileNotFoundException, ClassNotFoundException, SAXException, XPathExpressionException, TransformerException, ParserConfigurationException{
        try {
            Connection conn = null;
            
            
            Statement st = conecter().createStatement();
            
            //jib nombre de vente
            String query = "SELECT fournisseur_nb_vente FROM fournisseur WHERE fournisseur_nom='"+userF+"' and domain_nom='"+domain+"'";
             ResultSet rs = st.executeQuery(query);
             rs.next();
            int nbV =rs.getInt("fournisseur_nb_vente");
            //jib la date li 7at fiha service tsema old time
            
            //conf= jib la valeur te3 confiance ;
            String path2="C:\\Users\\sofia\\Documents\\NetBeansProjects\\JavaApplication6\\tmpWSDL\\";
            getFiles(path2,domain,userF);
            File file=new File(path2+"/"+userF+".xml");
            
            int conf=Integer.parseInt(xmlReaderGetConfiance(file));  // confiance nta hna ki tjib la valeur t3ha affectiha fih
            
            if(nbV<5 && Diff(userF, domain)>20 && conf>0){conf=conf-1;}else if(nbV == 5 && conf<10){conf+=1;}else
            if(nbV>6 && Diff(userF, domain)<20 && Diff(userF, domain)>10 && conf>0){conf=conf+1;}else if(nbV == 6 && conf<10){conf=conf+1;}
            if(nbV>20){conf=(conf+1)*3/2;
            if(conf>10){
                conf=10;
            }
            }
             System.out.println("javaapplication6.FilterChoise.confiance() ="+conf+" getconf= "+xmlReaderGetConfiance(file));
            // dok confiance rahi wajda ab3at din babaha l fichier wsdl 
            AddElemnt(path2+userF+".xml", xmlReaderGetReputation(file), Integer.toString(conf), xmlReaderGetExperience(file), xmlReaderGetDisponibilite(file), xmlReaderGetCout(file), xmlReaderGetTDRepence(file), xmlReaderGetRisques(file),xmlReaderGetTMDRepresentation(file));
            
            insertIntoDb(path2+userF+".xml", userF, domain);
            System.out.println("javaapplication6.FilterChoise.confiance() ="+conf+" getconf= "+xmlReaderGetConfiance(file));
        } catch (SQLException ex) {
            Logger.getLogger(FilterChoise.class.getName()).log(Level.SEVERE, null, ex);
        }
            
       
       
    
    }
public String currenttime(){
       java.util.Date dt = new java.util.Date();

java.text.SimpleDateFormat sdf = 
     new java.text.SimpleDateFormat("yyyy-MM-dd");

    String currentTime = sdf.format(dt);
    System.out.println("javaapplication6.FilterChoise.currenttime()"+currentTime);
       return currentTime;
       }
public Long Diff(String UserF,String Domain) throws SQLException{
long dif;
 String crnttime=currenttime();
DateTimeFormatter smpl= DateTimeFormatter.ofPattern("yyyy-MM-dd");
//SimpleDateFormat smpl = new SimpleDateFormat("dd MM yyyy");

LocalDate curnt = LocalDate.parse(crnttime,smpl);
LocalDate old = LocalDate.parse(getDate(UserF, Domain),smpl);
dif=ChronoUnit.DAYS.between(curnt,old);
return dif;
}
public String getDate(String User,String Domain) throws SQLException{
        
        String date=" ";
        try {
            ResultSet rs ;
            
            String q="select DAY(fournisseur_date),MONTH(fournisseur_date),YEAR(fournisseur_date) from Fournisseur WHERE fournisseur_nom='"+User+"' and domain_nom='"+Domain +"'";
            Statement stmt = conecter().createStatement();
            rs = stmt.executeQuery(q);
            rs.next();
            int month=Integer.parseInt(rs.getString("MONTH(fournisseur_date)"));
            if(month<10){
             date=rs.getString("YEAR(fournisseur_date)")+"-0"+month+"-"+rs.getString("DAY(fournisseur_date)");
            rs.close();
            stmt.close();
            }else{
                date=rs.getString("YEAR(fournisseur_date)")+"-"+month+"-"+rs.getString("DAY(fournisseur_date)");
            rs.close();
            stmt.close();
            }
            
                    } catch (SQLException ex) {
            Logger.getLogger(ControlPanelClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("javaapplication6.FilterChoise.getDate()"+date);
        return date;
    }
public void getFiles(String path,String Domain,String UserF) throws FileNotFoundException, SQLException, IOException, ClassNotFoundException{
        // DELETE DERECTORY
            Files.walk(Paths.get(path))
                .filter(Files::isRegularFile)
                .map(Path::toFile)
                .forEach(File::delete);
       
            
        File file=new File(path+UserF+".xml");
        FileOutputStream fos=new FileOutputStream(file);
        byte b[];
        Blob blob;

        PreparedStatement ps=conecter().prepareStatement("SELECT fichier FROM fournisseur where fournisseur_nom='"+UserF+"' and domain_nom='"+Domain+"'"); 
        ResultSet rs=ps.executeQuery();

        if(rs.next()){
            blob=rs.getBlob("fichier");
            b=blob.getBytes(1,(int)blob.length());
            fos.write(b);
        }

        ps.close();
        fos.close();
        conecter().close();
    }
   public String xmlReaderGetConfiance(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("confiance").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
     public String xmlReaderGetReputation(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("réputation").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetExperience(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("expérience").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetDisponibilite(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("disponibilité").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetCout(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("coût").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetTDRepence(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("temps_de_réponse").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetRisques(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("risques").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    }
    public String xmlReaderGetTMDRepresentation(File fXmlFile){
        
       String line=null;
       try {

	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	//System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		NodeList nL = doc.getElementsByTagName("types");	
	NodeList nList = doc.getElementsByTagName("propriétés");
			
	//System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
		//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			line=eElement.getElementsByTagName("temps_moyen_de_représentation").item(0).getTextContent();
                        

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
       return line;
   
    } 
    public void xmlReaderSetConfiance(String path,String line) throws SAXException, IOException, XPathExpressionException, TransformerException{
        
        try {
            DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();
            DocumentBuilder b = f.newDocumentBuilder();
            Document doc = b.parse(new File(path));
            
//Now, there are a few ways to do this, but simply, you can use the xpath API to find the nodes you want and update their content

XPath xPath = XPathFactory.newInstance().newXPath();
Node startDateNode = (Node) xPath.compile("/definitions/types/propriétés").evaluate(doc, XPathConstants.NODE);
startDateNode.setTextContent("29/07/2015");
Transformer tf = TransformerFactory.newInstance().newTransformer();
tf.setOutputProperty(OutputKeys.INDENT, "yes");
tf.setOutputProperty(OutputKeys.METHOD, "xml");
tf.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

DOMSource domSource = new DOMSource(doc);
StreamResult sr = new StreamResult(new File("Data.xml"));
tf.transform(domSource, sr);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(FilterChoise.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(FilterChoise.class.getName()).log(Level.SEVERE, null, ex);
        }
       
   
    }
        public void insertIntoDb(String filename,String User,String Domain) throws FileNotFoundException, SQLException, ClassNotFoundException, IOException{
     File file= new File(filename);


//PreparedStatement statement = conecter().prepareStatement("INSERT INTO Fournisser (file) VALUES (?) where UserName='"+UserName+"'and PassWord='"+PassWord+"'");
//statement.setBlob(1, inputStream);
     
        
        //DataInputStream dataIs = new DataInputStream(new FileInputStream(f1));
        PreparedStatement pst = conecter().prepareStatement("UPDATE fournisseur SET fichier = ? where (fournisseur_nom= '"+User+"') and (domain_nom= '"+Domain+"')");
        
                              FileInputStream input=new FileInputStream(file);
                               
                               pst.setBinaryStream(1,input,(int) file.length());
                               
                             
                                pst.executeUpdate();
                                pst.close();
    //pst.setInt(1,67);
      
       System.out.println("Reading file " + file.getAbsolutePath());
            System.out.println("Store file in the database.");
        
        System.out.println(" database.");
        
    
    
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
